1. 커밋 메세지 룰과 작성법
  첫번째 라인 : 제목(필수)
  두번째 라인 : 공란
  세번째 라인 : 부터 내용 작성, 무엇을 왜(선택) -자세하게 적는게 좋음
  마지막 라인 : 꼬리말 (#이슈 넘버) (선택)

  작성팁 : 최대한 구체적으로 작성, 주간보고에 그대로 쓸 정도록 작성

2. 커밋 전에 diff 확인하는 습관 들이기
  git diff명령어로 확인 혹은 툴에서 확인 

3. 왜 굳이 git add >  commit 두 단계에 걸쳐서 하는지 ?
  모든 파일을 굳이 기록 할 필요가 없기 때문

  버전을 여러개로 나눠서 만들고 싶은 경우
  1) git add로 기록할 파일을 고르고
  2) git commit으로 버전 생성(기록 완료)

4. 언제, 얼마나 commit 하는게 좋을까? 
  ctrl + s 누르는 것 처럼 5초마다 습관적으론 할 필욘 없음
  간단한 기능을 하나 추가할 때마다 commit 하면 됨

  예를 들어 웹 개발 시 회원가입 기능을 만든다고 한다면
  - 회원가입 폼 레이아웃 UI를 만들면 commit 하고
  - 입력한 이메일이 맞는지 검증하는 기능(유효성 검사)을 만들었다면 commit 하고
  - 서버로 데이터를 전송하는 기능을 만들었으면 commit 하고

  이런식으로 작은 작업 하나를 마쳤으면 commit 하는게 좋음
  중요한건 하루 1개 이상 commit을 할 것! (좋은 습관)

5. CLI 명령어 기반 vs GUI 툴 비교
  명령어는 git에 모든 기능 사용 가능한 반면 GUI 툴은 툴 자체에 구현된 기능만 쓸 수 있음

6. git push -u origin main
  - u 옵션은 방금 입력한 주소를 기억하라는 뜻
  위 명령어를 한번이라도 썼다면 그 다음부터는 주소를 입력하지 않고 git push만 입력해도 됨

7. git remote -v
  - 원격 저장소 정보를 보고 싶을 때 사용 

8. git clone http://원격저장소 주소
  원격저장소에 올린 프로젝트를 내 로컬에 복제(1번만 하면 됨)

9. git pull origin 
  원격저장소에 있는 모든 브랜치 내용을 가져와서 로컬 저장소에 합치라는 뜻
  - 특정브랜치만 땡기고 싶을 땐 
    git pull origin main
  
  (중요) 작업하기 전 git pull을 받아서 항상 코드를 최신 상태로 만들어 놓고 작업 시작!!

10. 저장소에 올리지 않을 파일들은 .gitignore
  설정 파일이나 빌드 산출물, 기타 라이브러리 파일들 등
  불필요한 파일들은 올리지 않는 것이 좋음  
  .gitignore 파일을 만들ㅇ서ㅓ 올리지 않을 폴더나 파일을 명시하면 됨
  그러면 git에서 해당 폴더랑 파일을 무시함


과제 : 
파일을 새로 만들거나 수정하면서 commit을 5번이상 해보기
중간중간 git status, git log도 써보기

파일 수정 









